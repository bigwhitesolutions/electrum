//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Electrum.MoneyTransferRetailer
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "https://sandbox.electrum.io/moneytransfer/v2";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// getCustomerInfo
        /// </summary>
        /// <param name="idNumber">Customer's identification number as per presented identification document.</param>
        /// <param name="idType">Type of presented identification document.</param>
        /// <param name="idCountryCode">Country of issue of presented identification document, expressed as an ISO 3166-1 Alpha-2 country code.</param>
        /// <param name="merchantId">The assigned merchant identifier. Also known as card acceptor id.</param>
        /// <param name="originatorInstId">Identifies the institution from which the transaction originates. Value to be assigned by Electrum.</param>
        /// <param name="receiverId">Identifies the service provider to whom this request must be directed.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferAdminMessage> AdminCustomersGetAsync(string idNumber, IdType? idType, string idCountryCode, string merchantId, string originatorInstId, string receiverId)
        {
            return AdminCustomersGetAsync(idNumber, idType, idCountryCode, merchantId, originatorInstId, receiverId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getCustomerInfo
        /// </summary>
        /// <param name="idNumber">Customer's identification number as per presented identification document.</param>
        /// <param name="idType">Type of presented identification document.</param>
        /// <param name="idCountryCode">Country of issue of presented identification document, expressed as an ISO 3166-1 Alpha-2 country code.</param>
        /// <param name="merchantId">The assigned merchant identifier. Also known as card acceptor id.</param>
        /// <param name="originatorInstId">Identifies the institution from which the transaction originates. Value to be assigned by Electrum.</param>
        /// <param name="receiverId">Identifies the service provider to whom this request must be directed.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferAdminMessage> AdminCustomersGetAsync(string idNumber, IdType? idType, string idCountryCode, string merchantId, string originatorInstId, string receiverId, System.Threading.CancellationToken cancellationToken)
        {
            if (idNumber == null)
                throw new System.ArgumentNullException("idNumber");

            if (receiverId == null)
                throw new System.ArgumentNullException("receiverId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/customers?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (idType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idCountryCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idCountryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idCountryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (originatorInstId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("originatorInstId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originatorInstId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("receiverId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(receiverId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferAdminMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// createOrUpdateCustomer
        /// </summary>
        /// <param name="body">A message containing the data required to carry out the admin request, as well as information about the point-of-sale from which the transaction originates.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferAdminMessage> AdminCustomersPostAsync(MoneyTransferAdminMessage body)
        {
            return AdminCustomersPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// createOrUpdateCustomer
        /// </summary>
        /// <param name="body">A message containing the data required to carry out the admin request, as well as information about the point-of-sale from which the transaction originates.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferAdminMessage> AdminCustomersPostAsync(MoneyTransferAdminMessage body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/customers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferAdminMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferAdminMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// getCustomerOrderHistory
        /// </summary>
        /// <param name="customerProfileId">Uniquely identifies customer's profile on the upstream entity's system.</param>
        /// <param name="receiverId">Identifies the service provider to whom this request must be directed.</param>
        /// <param name="merchantId">The assigned merchant identifier. Also known as card acceptor ID.</param>
        /// <param name="originatorInstId">Identifies the institution from which the transaction originates. Value to be assigned by Electrum.</param>
        /// <param name="fromDateTime">The date from which to start searching for orders (inclusive).</param>
        /// <param name="toDateTime">The date from which to end searching for orders (exclusive).</param>
        /// <param name="status">Should be among the options of the MoneyTransferLookupResponse Statuses.</param>
        /// <param name="paymentType">Payment type to filter orders by.</param>
        /// <param name="paymentIdentifierName">Payment identifier for the payment type indicated. Required if 'paymentType' is defined.</param>
        /// <param name="paymentIdentifierValue">Payment identifier value for the payment type indicated. Required if 'paymentType' is defined.</param>
        /// <param name="limit">Maximum number of orders to return. Use in conjunction with the "offset" parameter to tune which subset of the entire result set (as constrained by fromDate and toDate) is returned.</param>
        /// <param name="offset">Offset the entire result set by this amount of top-ordered results. Use in conjunction with the "limit" parameter to tune which subset of the entire result set (as constrained by fromDate and toDate) is returned.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferCustomerOrderHistory> AdminCustomersOrdersAsync(string customerProfileId, string receiverId, string merchantId, string originatorInstId, string fromDateTime, string toDateTime, string status, string paymentType, string paymentIdentifierName, string paymentIdentifierValue, long? limit, long? offset)
        {
            return AdminCustomersOrdersAsync(customerProfileId, receiverId, merchantId, originatorInstId, fromDateTime, toDateTime, status, paymentType, paymentIdentifierName, paymentIdentifierValue, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getCustomerOrderHistory
        /// </summary>
        /// <param name="customerProfileId">Uniquely identifies customer's profile on the upstream entity's system.</param>
        /// <param name="receiverId">Identifies the service provider to whom this request must be directed.</param>
        /// <param name="merchantId">The assigned merchant identifier. Also known as card acceptor ID.</param>
        /// <param name="originatorInstId">Identifies the institution from which the transaction originates. Value to be assigned by Electrum.</param>
        /// <param name="fromDateTime">The date from which to start searching for orders (inclusive).</param>
        /// <param name="toDateTime">The date from which to end searching for orders (exclusive).</param>
        /// <param name="status">Should be among the options of the MoneyTransferLookupResponse Statuses.</param>
        /// <param name="paymentType">Payment type to filter orders by.</param>
        /// <param name="paymentIdentifierName">Payment identifier for the payment type indicated. Required if 'paymentType' is defined.</param>
        /// <param name="paymentIdentifierValue">Payment identifier value for the payment type indicated. Required if 'paymentType' is defined.</param>
        /// <param name="limit">Maximum number of orders to return. Use in conjunction with the "offset" parameter to tune which subset of the entire result set (as constrained by fromDate and toDate) is returned.</param>
        /// <param name="offset">Offset the entire result set by this amount of top-ordered results. Use in conjunction with the "limit" parameter to tune which subset of the entire result set (as constrained by fromDate and toDate) is returned.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferCustomerOrderHistory> AdminCustomersOrdersAsync(string customerProfileId, string receiverId, string merchantId, string originatorInstId, string fromDateTime, string toDateTime, string status, string paymentType, string paymentIdentifierName, string paymentIdentifierValue, long? limit, long? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (customerProfileId == null)
                throw new System.ArgumentNullException("customerProfileId");

            if (receiverId == null)
                throw new System.ArgumentNullException("receiverId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/customers/orders?");
            urlBuilder_.Append(System.Uri.EscapeDataString("customerProfileId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerProfileId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("receiverId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(receiverId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (originatorInstId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("originatorInstId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originatorInstId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDateTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromDateTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDateTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toDateTime") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toDateTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentIdentifierName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentIdentifierName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentIdentifierName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentIdentifierValue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentIdentifierValue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentIdentifierValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferCustomerOrderHistory>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// getExchangeRate
        /// </summary>
        /// <param name="fromCurrency">The currency which amounts are converted from. One unit of this currency multiplied by the rate returned by this operation is equal to one unit of the toCurrency. This currency is expressed as a three digit number as specified in ISO 4217, e.g. South African Rand is encoded as 710.</param>
        /// <param name="toCurrency">The currency which amounts are converted to. One unit of this currency multiplied by the rate returned by this operation is equal to one unit of the fromCurrency. This currency is expressed as a three digit number as specified in ISO 4217, e.g. South African Rand is encoded as 710.</param>
        /// <param name="receiverId">The ID of the receiver who would process such a currency exchange. If this is supplied then a specific institution's exchange rate may be returned. If this parameter is not supplied then the exchange rate may simply be the market exchange rate.</param>
        /// <param name="settlementEntity">The ID of the settlement entity who would process such a currency exchange. If this is supplied then a specific settlement entity's exchange rate may be returned for a specific receiver.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ExchangeRate> AdminExchangerateAsync(string fromCurrency, string toCurrency, string receiverId, string settlementEntity)
        {
            return AdminExchangerateAsync(fromCurrency, toCurrency, receiverId, settlementEntity, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getExchangeRate
        /// </summary>
        /// <param name="fromCurrency">The currency which amounts are converted from. One unit of this currency multiplied by the rate returned by this operation is equal to one unit of the toCurrency. This currency is expressed as a three digit number as specified in ISO 4217, e.g. South African Rand is encoded as 710.</param>
        /// <param name="toCurrency">The currency which amounts are converted to. One unit of this currency multiplied by the rate returned by this operation is equal to one unit of the fromCurrency. This currency is expressed as a three digit number as specified in ISO 4217, e.g. South African Rand is encoded as 710.</param>
        /// <param name="receiverId">The ID of the receiver who would process such a currency exchange. If this is supplied then a specific institution's exchange rate may be returned. If this parameter is not supplied then the exchange rate may simply be the market exchange rate.</param>
        /// <param name="settlementEntity">The ID of the settlement entity who would process such a currency exchange. If this is supplied then a specific settlement entity's exchange rate may be returned for a specific receiver.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExchangeRate> AdminExchangerateAsync(string fromCurrency, string toCurrency, string receiverId, string settlementEntity, System.Threading.CancellationToken cancellationToken)
        {
            if (fromCurrency == null)
                throw new System.ArgumentNullException("fromCurrency");

            if (toCurrency == null)
                throw new System.ArgumentNullException("toCurrency");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/exchangerate?");
            urlBuilder_.Append(System.Uri.EscapeDataString("fromCurrency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromCurrency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("toCurrency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toCurrency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (receiverId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("receiverId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(receiverId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (settlementEntity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("settlementEntity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(settlementEntity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExchangeRate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// getFeeQuote
        /// </summary>
        /// <param name="amount">The amount the customer wishes to transfer.</param>
        /// <param name="amountIncludesFee">Whether or not the amount is inclusive of the fee.</param>
        /// <param name="idNumber">National identity number of the customer.</param>
        /// <param name="merchantId">The assigned merchant identifier. Also known as card acceptor ID.</param>
        /// <param name="originatorInstId">Identifies the institution from which the transaction originates. Value to be assigned by Electrum.</param>
        /// <param name="receiverId">Identifies the service provider to whom this request must be directed.</param>
        /// <param name="senderCell">The cellphone number of the sender of the funds. This field is required by some providers. This must conform to the ITU E.164 numbering plan (https://www.itu.int/rec/T-REC-E.164/en) e.g. 27821234567 for a South Africa number.</param>
        /// <param name="recipientCell">The cellphone number of the recipient of the funds. This field is required by some providers. This must conform to the ITU E.164 numbering plan (https://www.itu.int/rec/T-REC-E.164/en) e.g. 27821234567 for a South Africa number.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferFeeQuote> AdminFeesGetAsync(long amount, bool amountIncludesFee, string idNumber, string merchantId, string originatorInstId, string receiverId, string senderCell, string recipientCell)
        {
            return AdminFeesGetAsync(amount, amountIncludesFee, idNumber, merchantId, originatorInstId, receiverId, senderCell, recipientCell, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getFeeQuote
        /// </summary>
        /// <param name="amount">The amount the customer wishes to transfer.</param>
        /// <param name="amountIncludesFee">Whether or not the amount is inclusive of the fee.</param>
        /// <param name="idNumber">National identity number of the customer.</param>
        /// <param name="merchantId">The assigned merchant identifier. Also known as card acceptor ID.</param>
        /// <param name="originatorInstId">Identifies the institution from which the transaction originates. Value to be assigned by Electrum.</param>
        /// <param name="receiverId">Identifies the service provider to whom this request must be directed.</param>
        /// <param name="senderCell">The cellphone number of the sender of the funds. This field is required by some providers. This must conform to the ITU E.164 numbering plan (https://www.itu.int/rec/T-REC-E.164/en) e.g. 27821234567 for a South Africa number.</param>
        /// <param name="recipientCell">The cellphone number of the recipient of the funds. This field is required by some providers. This must conform to the ITU E.164 numbering plan (https://www.itu.int/rec/T-REC-E.164/en) e.g. 27821234567 for a South Africa number.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferFeeQuote> AdminFeesGetAsync(long amount, bool amountIncludesFee, string idNumber, string merchantId, string originatorInstId, string receiverId, string senderCell, string recipientCell, System.Threading.CancellationToken cancellationToken)
        {
            if (amount == null)
                throw new System.ArgumentNullException("amount");

            if (amountIncludesFee == null)
                throw new System.ArgumentNullException("amountIncludesFee");

            if (originatorInstId == null)
                throw new System.ArgumentNullException("originatorInstId");

            if (receiverId == null)
                throw new System.ArgumentNullException("receiverId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/fees?");
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("amountIncludesFee") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amountIncludesFee, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (idNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("originatorInstId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originatorInstId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("receiverId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(receiverId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (senderCell != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("senderCell") + "=").Append(System.Uri.EscapeDataString(ConvertToString(senderCell, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recipientCell != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recipientCell") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recipientCell, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferFeeQuote>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// getFeeQuote
        /// </summary>
        /// <param name="body">Details necessary to provide a quote.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferFeeQuote> AdminFeesPostAsync(MoneyTransferQuoteRequest body)
        {
            return AdminFeesPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getFeeQuote
        /// </summary>
        /// <param name="body">Details necessary to provide a quote.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferFeeQuote> AdminFeesPostAsync(MoneyTransferQuoteRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/fees");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferFeeQuote>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// lookupOrder
        /// </summary>
        /// <param name="orderRedeemRef">Reference used by the recipient to redeem the order. If both this value and remittanceRef are supplied then this takes precedence.</param>
        /// <param name="merchantId">The assigned merchant identifier. Also known as card acceptor ID.</param>
        /// <param name="originatorInstId">Identifies the institution from which the transaction originates. Value to be assigned by Electrum.</param>
        /// <param name="receiverId">Identifies the service provider to whom this request must be directed.</param>
        /// <param name="settlementEntityId">Identifies the entity with whom the Merchant will settle the transaction.</param>
        /// <param name="remittanceRef">Reference used by the recipient to refer to the order when no redemption is to occur (e.g. direct account deposits). If both this value and orderRedeemRef are supplied then orderRedeemRef takes precedence.</param>
        /// <param name="idNumber">Customer's identification number as per presented identification document.</param>
        /// <param name="idType">Type of presented identification document. This must be supplied if idNumber is supplied.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferLookupResponse> OrdersGetAsync(string orderRedeemRef, string merchantId, string originatorInstId, string receiverId, string settlementEntityId, string remittanceRef, string idNumber, IdType2? idType)
        {
            return OrdersGetAsync(orderRedeemRef, merchantId, originatorInstId, receiverId, settlementEntityId, remittanceRef, idNumber, idType, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// lookupOrder
        /// </summary>
        /// <param name="orderRedeemRef">Reference used by the recipient to redeem the order. If both this value and remittanceRef are supplied then this takes precedence.</param>
        /// <param name="merchantId">The assigned merchant identifier. Also known as card acceptor ID.</param>
        /// <param name="originatorInstId">Identifies the institution from which the transaction originates. Value to be assigned by Electrum.</param>
        /// <param name="receiverId">Identifies the service provider to whom this request must be directed.</param>
        /// <param name="settlementEntityId">Identifies the entity with whom the Merchant will settle the transaction.</param>
        /// <param name="remittanceRef">Reference used by the recipient to refer to the order when no redemption is to occur (e.g. direct account deposits). If both this value and orderRedeemRef are supplied then orderRedeemRef takes precedence.</param>
        /// <param name="idNumber">Customer's identification number as per presented identification document.</param>
        /// <param name="idType">Type of presented identification document. This must be supplied if idNumber is supplied.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferLookupResponse> OrdersGetAsync(string orderRedeemRef, string merchantId, string originatorInstId, string receiverId, string settlementEntityId, string remittanceRef, string idNumber, IdType2? idType, System.Threading.CancellationToken cancellationToken)
        {
            if (receiverId == null)
                throw new System.ArgumentNullException("receiverId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders?");
            if (orderRedeemRef != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("orderRedeemRef") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orderRedeemRef, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (originatorInstId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("originatorInstId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originatorInstId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("receiverId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(receiverId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (settlementEntityId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("settlementEntityId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(settlementEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (remittanceRef != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("remittanceRef") + "=").Append(System.Uri.EscapeDataString(ConvertToString(remittanceRef, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferLookupResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// createOrder
        /// </summary>
        /// <param name="body">A message containing the data required to carry out the payment order, as well as information about the point-of-sale from which the transaction originates.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferAuthResponse> OrdersPostAsync(MoneyTransferAuthRequest body)
        {
            return OrdersPostAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// createOrder
        /// </summary>
        /// <param name="body">A message containing the data required to carry out the payment order, as well as information about the point-of-sale from which the transaction originates.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferAuthResponse> OrdersPostAsync(MoneyTransferAuthRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferAuthResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferAuthResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// cancelOrder
        /// </summary>
        /// <param name="body">A message containing the data required to cancel a payment order, as well as information about the point-of-sale from which the transaction originates.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferOrderCancelResponse> OrdersCancelAsync(MoneyTransferOrderCancelRequest body)
        {
            return OrdersCancelAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// cancelOrder
        /// </summary>
        /// <param name="body">A message containing the data required to cancel a payment order, as well as information about the point-of-sale from which the transaction originates.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferOrderCancelResponse> OrdersCancelAsync(MoneyTransferOrderCancelRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/cancel");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferOrderCancelResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// cancelOrderReversal
        /// </summary>
        /// <param name="body">A message containing the data required to reverse an order cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferCancelOrderReversal> OrdersCancelReversalsAsync(MoneyTransferCancelOrderReversal body)
        {
            return OrdersCancelReversalsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// cancelOrderReversal
        /// </summary>
        /// <param name="body">A message containing the data required to reverse an order cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferCancelOrderReversal> OrdersCancelReversalsAsync(MoneyTransferCancelOrderReversal body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/cancel/reversals");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferCancelOrderReversal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferCancelOrderReversal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// confirmPayment
        /// </summary>
        /// <param name="body">A payment confirmation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferConfirmation> OrdersConfirmationsAsync(MoneyTransferConfirmation body)
        {
            return OrdersConfirmationsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// confirmPayment
        /// </summary>
        /// <param name="body">A payment confirmation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferConfirmation> OrdersConfirmationsAsync(MoneyTransferConfirmation body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/confirmations");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferConfirmation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferConfirmation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// updateOrderPin
        /// </summary>
        /// <param name="body">The new pin for the order.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task OrdersPinAsync(MoneyTransferOrderPinUpdateRequest body)
        {
            return OrdersPinAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// updateOrderPin
        /// </summary>
        /// <param name="body">The new pin for the order.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task OrdersPinAsync(MoneyTransferOrderPinUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/pin");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// redeemOrder
        /// </summary>
        /// <param name="body">A message containing the data required to redeem the order, as well as information about the point-of-sale from which the transaction originates.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferRedeemResponse> OrdersRedemptionsAsync(MoneyTransferRedeemRequest body)
        {
            return OrdersRedemptionsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// redeemOrder
        /// </summary>
        /// <param name="body">A message containing the data required to redeem the order, as well as information about the point-of-sale from which the transaction originates.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferRedeemResponse> OrdersRedemptionsAsync(MoneyTransferRedeemRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/redemptions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferRedeemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferRedeemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// confirmRedeem
        /// </summary>
        /// <param name="body">A redemption confirmation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferConfirmation> OrdersRedemptionsConfirmationsAsync(MoneyTransferConfirmation body)
        {
            return OrdersRedemptionsConfirmationsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// confirmRedeem
        /// </summary>
        /// <param name="body">A redemption confirmation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferConfirmation> OrdersRedemptionsConfirmationsAsync(MoneyTransferConfirmation body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/redemptions/confirmations");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferConfirmation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferConfirmation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// reverseRedeem
        /// </summary>
        /// <param name="body">A redemption reversal.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferReversal> OrdersRedemptionsReversalsAsync(MoneyTransferReversal body)
        {
            return OrdersRedemptionsReversalsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// reverseRedeem
        /// </summary>
        /// <param name="body">A redemption reversal.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferReversal> OrdersRedemptionsReversalsAsync(MoneyTransferReversal body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/redemptions/reversals");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferReversal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferReversal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// reversePayment
        /// </summary>
        /// <param name="body">A payment reversal.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MoneyTransferReversal> OrdersReversalsAsync(MoneyTransferReversal body)
        {
            return OrdersReversalsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// reversePayment
        /// </summary>
        /// <param name="body">A payment reversal.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MoneyTransferReversal> OrdersReversalsAsync(MoneyTransferReversal body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/reversals");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferReversal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MoneyTransferReversal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// orderStatus
        /// </summary>
        /// <param name="body">The new status of the order.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task OrdersStatusAsync(MoneyTransferOrderStatusUpdateRequest body)
        {
            return OrdersStatusAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// orderStatus
        /// </summary>
        /// <param name="body">The new status of the order.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task OrdersStatusAsync(MoneyTransferOrderStatusUpdateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Not implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Service Unavailable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 504)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDetail>("Gateway Timeout", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Base model for all account types
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("BankAccount", typeof(BankAccount))]
    [JsonInheritanceAttribute("IbanAccount", typeof(IbanAccount))]
    [JsonInheritanceAttribute("IfscAccount", typeof(IfscAccount))]
    [JsonInheritanceAttribute("MobileWalletAccount", typeof(MobileWalletAccount))]
    [JsonInheritanceAttribute("SwiftAccount", typeof(SwiftAccount))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Account
    {
        /// <summary>
        /// The ID of this account e.g. service provider's customer's account number, a bank account number, an IBAN number or a mobile wallet's MSISDN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }

    }

    /// <summary>
    /// Details of a customer's address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// First line of street address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Second line of street address (if required).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine2 { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("province", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Province { get; set; }

        /// <summary>
        /// Country expressed as an ISO 3166-1 Alpha-2 code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostCode { get; set; }

    }

    /// <summary>
    /// Amounts which make up the transaction. Absent amounts have zero value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amounts
    {
        /// <summary>
        /// The transaction amount requested by the customer to be authorised or approved. This is the total amount the customer wishes to pay for a service or virtual product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LedgerAmount RequestAmount { get; set; }

        /// <summary>
        /// The transaction amount which was approved by the upstream entity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LedgerAmount ApprovedAmount { get; set; }

        /// <summary>
        /// Fees charged by the upstream entity for processing the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LedgerAmount FeeAmount { get; set; }

        /// <summary>
        /// The remaining balance on the customer's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balanceAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LedgerAmount BalanceAmount { get; set; }

        /// <summary>
        /// Any additional amounts that are involved in a transaction which don't appropriately fit into the other amount fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalAmounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, LedgerAmount> AdditionalAmounts { get; set; }

    }

    /// <summary>
    /// A model to describe bank accounts
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccount : Account
    {
        /// <summary>
        /// The routing code for the particular bank account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("routingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoutingCode { get; set; }

        /// <summary>
        /// The region where the bank account resides.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

    }

    /// <summary>
    /// Used to indicate barcode information for a slip line.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Barcode
    {
        /// <summary>
        /// Data to be encoded in the barcode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Data { get; set; }

        /// <summary>
        /// Specifies the encoding used in the barcode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Encoding { get; set; }

    }

    /// <summary>
    /// A PIN required to authorise a transaction. EncryptionParameters should be provided where the service will be performing operations on the encrypted PIN, such as PIN translation. Only the PIN block need be provided where the service is expected to forward it to a third party, where the calling client and said third party have agreed upon encryption parameters beforehand.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EncryptedPin
    {
        /// <summary>
        /// Hexadecimal string representing the encrypted PIN to be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pinBlock", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-fA-F0-9]{16}")]
        public string PinBlock { get; set; }

        /// <summary>
        /// Parameters pertaining to the generation of the pinBlock. Required if the service is to perform any operations on the encrypted PIN, such as PIN translation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encryptionParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EncryptionParameters EncryptionParameters { get; set; }

    }

    /// <summary>
    /// Parameters pertaining to the generation of the PIN block. Required if the service is to perform any operations on the encrypted PIN, such as translation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EncryptionParameters
    {
        /// <summary>
        /// PIN block format that was used when encrypting the PIN. Defaults to ISO_9564_FORMAT_0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pinBlockFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EncryptionParametersPinBlockFormat? PinBlockFormat { get; set; } = Electrum.MoneyTransferRetailer.EncryptionParametersPinBlockFormat.ISO_9564_FORMAT_0;

        /// <summary>
        /// 12 digit account number used when encrypting the PIN. When account number is a card number (PAN), this is the rightmost 12 digits excluding the check digit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{12}")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Index of the key under which the PIN block is encrypted. Where keys are exchanged in TR-31 KeyBlock format, this should be set to the key version number field of the key used for encryption. If this field is not populated, the most recently exchanged key will be used. Note that omitting this field may require a higher level of synchronization during automated key exchange in some environments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KeyIndex { get; set; }

    }

    /// <summary>
    /// Represents the outcome of an unsuccessful transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorDetail
    {
        /// <summary>
        /// The type of error that occurred
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ErrorDetailErrorType ErrorType { get; set; }

        /// <summary>
        /// A description of the error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// The UUID of the message for which the error occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The UUID of the original request message in the case of an error occurring for an advice message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalId { get; set; }

        /// <summary>
        /// A free form detailed description of a particular failure condition may optionally be supplied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detailMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object DetailMessage { get; set; }

        /// <summary>
        /// The error code returned by the service provider. Note that this should be used for informational purposes only. Messages displayed on the POS should make use of errorType and errorMessage to ensure a consistent set of responses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("providerErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProviderErrorCode { get; set; }

        /// <summary>
        /// The error message returned by the service provider. Note that this should be used for informational purposes only. Messages displayed on the POS should make use of errorType and errorMessage to ensure a consistent set of responses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("providerErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProviderErrorMessage { get; set; }

    }

    /// <summary>
    /// An object describing the exchange rate from one currency to another.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExchangeRate
    {
        /// <summary>
        /// The exchange rate expressed as the ratio of fromCurrency : toCurrency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Always)]
        public double Rate { get; set; }

        /// <summary>
        /// The currency which amounts are converted from. One unit of this currency multiplied by the rate is equal to one unit of the toCurrency. This currency is expressed as a three digit number as specified in ISO 4217, e.g. South African Rand is encoded as 710.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{3}")]
        public string FromCurrency { get; set; }

        /// <summary>
        /// The currency which amounts are converted to. One unit of this currency multiplied by the rate is equal to one unit of the fromCurrency. This currency is expressed as a three digit number as specified in ISO 4217, e.g. South African Rand is encoded as 710.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{3}")]
        public string ToCurrency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeQuote
    {
        /// <summary>
        /// The fee to be charged for the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LedgerAmount FeeAmount { get; set; } = new LedgerAmount();

        /// <summary>
        /// The amount to be transferred to the recipient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LedgerAmount TransferAmount { get; set; } = new LedgerAmount();

        /// <summary>
        /// Total amount payable by the sender, including fee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LedgerAmount TotalAmount { get; set; } = new LedgerAmount();

    }

    /// <summary>
    /// A model to describe IBAN accounts. Such accounts consist of just an account number.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IbanAccount : Account
    {

    }

    /// <summary>
    /// A model to describe IFSC (Indian Financial System Code) accounts
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IfscAccount : Account
    {
        /// <summary>
        /// The IFSC code for the particular bank account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ifscCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IfscCode { get; set; }

    }

    /// <summary>
    /// Originating, acquiring, processing, or receiving institution details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Institution
    {
        /// <summary>
        /// The institution's ID. API implementations should take care to set this field as appropriate for the implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The institutions's name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }

    }

    /// <summary>
    /// An amount object only containing value and currency, and optionally an indicator of DEBIT/CREDIT
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LedgerAmount
    {
        /// <summary>
        /// Amount in minor denomination, e.g. R799.95 is encoded as 79995
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public long Amount { get; set; }

        /// <summary>
        /// Three digit currency number from ISO 4217, e.g. South African Rand is encoded as 710
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{3}")]
        public string Currency { get; set; }

        /// <summary>
        /// Indicates whether this amount is a debit or a credit. Only required when the amount can be either a debit or a credit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ledgerIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LedgerAmountLedgerIndicator? LedgerIndicator { get; set; }

    }

    /// <summary>
    /// Merchant related data. Must be included if available
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Merchant
    {
        /// <summary>
        /// The assigned four digit merchant category code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchantType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{4}")]
        public string MerchantType { get; set; }

        /// <summary>
        /// The assigned merchant identifier. Also known as card acceptor id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(15, MinimumLength = 15)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The name of a merchant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchantName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MerchantName MerchantName { get; set; } = new MerchantName();

    }

    /// <summary>
    /// A container object representing the Merchant Name and Location
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MerchantName
    {
        /// <summary>
        /// The merchant or trading as name associated with the merchant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(23)]
        public string Name { get; set; }

        /// <summary>
        /// The city where the merchant is located
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        public string City { get; set; }

        /// <summary>
        /// The state or region where the merchant is located
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Region { get; set; }

        /// <summary>
        /// The country where the merchant is located
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }

    }

    /// <summary>
    /// A model to describe mobile wallet accounts. Such accounts consist of just an account number. This account number is typically the customer's MSISDN.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MobileWalletAccount : Account
    {

    }

    /// <summary>
    /// Used to transfer data in calls to the /admin/customers resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferAdminMessage
    {
        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Originator { get; set; } = new Originator();

        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Receiver { get; set; } = new Institution();

        [Newtonsoft.Json.JsonProperty("customerDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalDetails CustomerDetails { get; set; }

        /// <summary>
        /// Uniquely identifies customer's profile on the upstream entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerProfileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerProfileId { get; set; }

    }

    /// <summary>
    /// Used to submit data in a call to the createOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferAuthRequest
    {
        /// <summary>
        /// A list containing labels that can be used to discover this transaction or group it with other transactions sharing labels with the same label name and value. Transaction labels should never be used to make transaction processing decisions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionLabel> TransactionLabels { get; set; }

        /// <summary>
        /// The randomly generated UUID identifying this transaction, as defined for a variant 4 UUID in [RFC 4122](https://tools.ietf.org/html/rfc4122)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The date and time of the message as recorded by the sender. The format shall be as defined for date-time in [RFC 3339 section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). It is recommended that the optional time-secfrac be included up to millisecond precision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }

        /// <summary>
        /// Data relating to the originator of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Originator { get; set; } = new Originator();

        /// <summary>
        /// Data relating to the sender of Transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Client { get; set; } = new Institution();

        /// <summary>
        /// Data relating to the entity with whom the Merchant will settle the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution SettlementEntity { get; set; }

        /// <summary>
        /// Data relating to the entity which ultimately processes the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution Receiver { get; set; }

        /// <summary>
        /// An array of identifiers which each identify the transaction within each entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyIdentifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ThirdPartyIdentifier> ThirdPartyIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<ThirdPartyIdentifier>();

        /// <summary>
        /// Text to be printed on the customer receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slipData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SlipData SlipData { get; set; }

        /// <summary>
        /// Used to group multiple transactions which would otherwise be considered independent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basketRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BasketRef { get; set; }

        /// <summary>
        /// Data relating to the type of transaction taking place (i.e. cash withdrawal, goods and services etc.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tranType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferAuthRequestTranType? TranType { get; set; }

        /// <summary>
        /// This specifies the type of source account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srcAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferAuthRequestSrcAccType? SrcAccType { get; set; }

        /// <summary>
        /// This specifies the type of destination account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferAuthRequestDestAccType? DestAccType { get; set; }

        /// <summary>
        /// The System Trace Audit Number can be used to locate transactions across different systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stan { get; set; }

        /// <summary>
        /// This is a reference set by the original source of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rrn { get; set; }

        /// <summary>
        /// The amount to be transferred. This field may be deprecated in a future version of the API. We encourage you to please also populate the 'amounts.requestAmount' field with this information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LedgerAmount Amount { get; set; } = new LedgerAmount();

        /// <summary>
        /// Personal details of a customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("senderDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PersonalDetails SenderDetails { get; set; } = new PersonalDetails();

        /// <summary>
        /// Personal details of the intended recipient. Conditionally optional - please confirm with your integration partner whether this is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalDetails RecipientDetails { get; set; }

        /// <summary>
        /// The encrypted PIN to be used by the recipient to redeem the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EncryptedPin Pin { get; set; }

        /// <summary>
        /// Uniquely identifies customer's profile on the upstream entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerProfileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerProfileId { get; set; }

        /// <summary>
        /// An optional flag indicating whether the customer placing the order is already registered on the provider's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newCustomer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NewCustomer { get; set; } = false;

        /// <summary>
        /// The fee that will be charged on this transaction, as accepted by the sender.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LedgerAmount Fee { get; set; }

        /// <summary>
        /// The value returned in a previous MoneyTransferFeeQuoteResponse object. This allows a specific money transfer order to be linked to a specific quote.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quoteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteId { get; set; }

        /// <summary>
        /// The reason the sender is performing a money transfer. This may be tracked for compliance/reporting purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purposeOfRemittance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferAuthRequestPurposeOfRemittance? PurposeOfRemittance { get; set; }

        /// <summary>
        /// Amounts which make up the transaction. The existing 'amount' field currently takes precedence over this 'amounts' field, however the use of this 'amounts' field is encouraged. The 'amount' field may be deprecated in a future version of this API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amounts Amounts { get; set; }

        /// <summary>
        /// The recipientRelationship between the sender and recipient of the money transfer. This may be tracked for compliance/reporting purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientRelationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferAuthRequestRecipientRelationship? RecipientRelationship { get; set; }

    }

    /// <summary>
    /// Contains the data returned by a call to the createOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferAuthResponse
    {
        /// <summary>
        /// A list containing labels that can be used to discover this transaction or group it with other transactions sharing labels with the same label name and value. Transaction labels should never be used to make transaction processing decisions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionLabel> TransactionLabels { get; set; }

        /// <summary>
        /// The randomly generated UUID identifying this transaction, as defined for a variant 4 UUID in [RFC 4122](https://tools.ietf.org/html/rfc4122)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The date and time of the message as recorded by the sender. The format shall be as defined for date-time in [RFC 3339 section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). It is recommended that the optional time-secfrac be included up to millisecond precision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }

        /// <summary>
        /// Data relating to the originator of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Originator { get; set; } = new Originator();

        /// <summary>
        /// Data relating to the sender of Transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Client { get; set; } = new Institution();

        /// <summary>
        /// Data relating to the entity with whom the Merchant will settle the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution SettlementEntity { get; set; }

        /// <summary>
        /// Data relating to the entity which ultimately processes the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution Receiver { get; set; }

        /// <summary>
        /// An array of identifiers which each identify the transaction within each entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyIdentifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ThirdPartyIdentifier> ThirdPartyIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<ThirdPartyIdentifier>();

        /// <summary>
        /// Text to be printed on the customer receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slipData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SlipData SlipData { get; set; }

        /// <summary>
        /// Used to group multiple transactions which would otherwise be considered independent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basketRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BasketRef { get; set; }

        /// <summary>
        /// Data relating to the type of transaction taking place (i.e. cash withdrawal, goods and services etc.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tranType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferAuthResponseTranType? TranType { get; set; }

        /// <summary>
        /// This specifies the type of source account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srcAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferAuthResponseSrcAccType? SrcAccType { get; set; }

        /// <summary>
        /// This specifies the type of destination account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferAuthResponseDestAccType? DestAccType { get; set; }

        /// <summary>
        /// The System Trace Audit Number can be used to locate transactions across different systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stan { get; set; }

        /// <summary>
        /// This is a reference set by the original source of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rrn { get; set; }

        /// <summary>
        /// The amount to be transferred. This field may be deprecated in a future version of the API. We encourage you to please also populate the 'amounts.requestAmount' field with this information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LedgerAmount Amount { get; set; } = new LedgerAmount();

        [Newtonsoft.Json.JsonProperty("senderDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PersonalDetails SenderDetails { get; set; } = new PersonalDetails();

        /// <summary>
        /// Reference used by the recipient to redeem the order. This must be printed on the receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderRedeemRef { get; set; }

        /// <summary>
        /// An alternate reference used by the recipient to redeem the order. This must be printed on the receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRefAlt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderRedeemRefAlt { get; set; }

        /// <summary>
        /// Reference used by the service provider to uniquely identify the money transfer order on their system. This field can be used if the provider supplies a supplementary reference for the order in addition to the orderRedeemRef. Note that any reference issued by the provider that is specific to a particular leg of the order process should be set as a ThirdPartyIdentifier (i.e. the authorization and redeem legs of the order should each have its own reference).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        /// <summary>
        /// Uniquely identifies customer's profile on the upstream entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerProfileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerProfileId { get; set; }

        /// <summary>
        /// Amounts which make up the transaction. The existing 'amount' field currently takes precedence over this 'amounts' field, however the use of this 'amounts' field is encouraged. The 'amount' field may be deprecated in a future version of this API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amounts Amounts { get; set; }

    }

    /// <summary>
    /// An advice that notifies that the outcome of an authorisation transaction be reversed. This can be either due to cashier cancellation, or upstream timeout.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferCancelOrderReversal
    {
        /// <summary>
        /// The randomly generated UUID identifying this advice, as defined for a variant 4 UUID in [RFC 4122](https://tools.ietf.org/html/rfc4122)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The UUID identifying the request that this advice relates to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RequestId { get; set; }

        /// <summary>
        /// The date and time of the message as recorded by the sender. The format shall be as defined for date-time in [RFC 3339 section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). It is recommended that the optional time-secfrac be included up to millisecond precision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }

        /// <summary>
        /// The unaltered thirdPartyIdentifiers array as supplied in the related BasicResponse message. Required if thirdPartyIdentifiers field was present in the BasicResponse. If no thirdPartyIdentifiers was received in the BasicResponse or no BasicResponse was received then this should be set to the thirdPartyIdentifiers sent in the original request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyIdentifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ThirdPartyIdentifier> ThirdPartyIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<ThirdPartyIdentifier>();

        /// <summary>
        /// The System Trace Audit Number can be used to locate transactions across different systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stan { get; set; }

        /// <summary>
        /// This is a reference set by the original source of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rrn { get; set; }

        /// <summary>
        /// Communicates the final amount for a transaction in the approvedAmount field. If absent from a reversal then a full reversal is implied (i.e. a final amount of zero). If absent from a confirmation then a full confirmation is implied (i.e. the final amount is the same as the approvedAmount of the  authorisation response). The approvedAmount in an advice message should be less than or equal to the approvedAmount of the authorisation response as stand-in transactions are not currently supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amounts Amounts { get; set; }

        /// <summary>
        /// The reason for the reversal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reversalReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferCancelOrderReversalReversalReason ReversalReason { get; set; }

    }

    /// <summary>
    /// An advice that notifies of the positive completion of a transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferConfirmation
    {
        /// <summary>
        /// The randomly generated UUID identifying this advice, as defined for a variant 4 UUID in [RFC 4122](https://tools.ietf.org/html/rfc4122)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The UUID identifying the request that this advice relates to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RequestId { get; set; }

        /// <summary>
        /// The date and time of the message as recorded by the sender. The format shall be as defined for date-time in [RFC 3339 section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). It is recommended that the optional time-secfrac be included up to millisecond precision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }

        /// <summary>
        /// The unaltered thirdPartyIdentifiers array as supplied in the related BasicResponse message. Required if thirdPartyIdentifiers field was present in the BasicResponse. If no thirdPartyIdentifiers was received in the BasicResponse or no BasicResponse was received then this should be set to the thirdPartyIdentifiers sent in the original request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyIdentifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ThirdPartyIdentifier> ThirdPartyIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<ThirdPartyIdentifier>();

        /// <summary>
        /// The System Trace Audit Number can be used to locate transactions across different systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stan { get; set; }

        /// <summary>
        /// This is a reference set by the original source of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rrn { get; set; }

        /// <summary>
        /// Communicates the final amount for a transaction in the approvedAmount field. If absent from a reversal then a full reversal is implied (i.e. a final amount of zero). If absent from a confirmation then a full confirmation is implied (i.e. the final amount is the same as the approvedAmount of the  authorisation response). The approvedAmount in an advice message should be less than or equal to the approvedAmount of the authorisation response as stand-in transactions are not currently supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amounts Amounts { get; set; }

    }

    /// <summary>
    /// A list of orders made by a customer for the given receiver.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferCustomerOrderHistory
    {
        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Receiver { get; set; } = new Institution();

        [Newtonsoft.Json.JsonProperty("orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MoneyTransferLookupResponse> Orders { get; set; }

        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Originator Originator { get; set; }

        [Newtonsoft.Json.JsonProperty("paging", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PaginationInfo Paging { get; set; } = new PaginationInfo();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferFeeQuote
    {
        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Originator { get; set; } = new Originator();

        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Receiver { get; set; } = new Institution();

        /// <summary>
        /// Data relating to the entity with whom the Merchant will settle the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution SettlementEntity { get; set; }

        /// <summary>
        /// Contains details of the fee that will be charged for the transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeQuote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeQuote FeeQuote { get; set; }

        /// <summary>
        /// Contains details of the sender of the money transfer funds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("senderDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalDetails SenderDetails { get; set; }

        /// <summary>
        /// Contains details of the recipient of the money transfer funds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalDetails RecipientDetails { get; set; }

        /// <summary>
        /// A reference to this quote. This maybe provided when an order is created to link an order to a specific quote.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quoteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteId { get; set; }

        /// <summary>
        /// The date and time when the quote expires.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiryDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpiryDateTime { get; set; }

    }

    /// <summary>
    /// Contains the data returned by a call to the lookupOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferLookupResponse
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LedgerAmount Amount { get; set; } = new LedgerAmount();

        /// <summary>
        /// The status of the order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferLookupResponseStatus? Status { get; set; }

        /// <summary>
        /// The detailed description of the status of an order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Originator Originator { get; set; }

        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Receiver { get; set; } = new Institution();

        /// <summary>
        /// Data relating to the entity with whom the Merchant will settle the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution SettlementEntity { get; set; }

        /// <summary>
        /// Reference used by the recipient to redeem the order. This must be printed on the receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderRedeemRef { get; set; }

        /// <summary>
        /// An alternate reference used by the recipient to redeem the order. This must be printed on the receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRefAlt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderRedeemRefAlt { get; set; }

        /// <summary>
        /// Reference used by the service provider to uniquely identify the money transfer order on their system. This field can be used if the provider supplies a supplementary reference for the order in addition to the orderRedeemRef. Note that any reference issued by the provider that is specific to a particular leg of the order process should be set as a ThirdPartyIdentifier (i.e. the authorization and redeem legs of the order should each have its own reference).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }

    }

    /// <summary>
    /// Used to submit data in a call to the cancelOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferOrderCancelRequest
    {
        /// <summary>
        /// A list containing labels that can be used to discover this transaction or group it with other transactions sharing labels with the same label name and value. Transaction labels should never be used to make transaction processing decisions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionLabel> TransactionLabels { get; set; }

        /// <summary>
        /// The randomly generated UUID identifying this transaction, as defined for a variant 4 UUID in [RFC 4122](https://tools.ietf.org/html/rfc4122)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The date and time of the message as recorded by the sender. The format shall be as defined for date-time in [RFC 3339 section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). It is recommended that the optional time-secfrac be included up to millisecond precision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }

        /// <summary>
        /// Data relating to the originator of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Originator { get; set; } = new Originator();

        /// <summary>
        /// Data relating to the sender of Transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Client { get; set; } = new Institution();

        /// <summary>
        /// Data relating to the entity with whom the Merchant will settle the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution SettlementEntity { get; set; }

        /// <summary>
        /// Data relating to the entity which ultimately processes the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution Receiver { get; set; }

        /// <summary>
        /// An array of identifiers which each identify the transaction within each entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyIdentifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ThirdPartyIdentifier> ThirdPartyIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<ThirdPartyIdentifier>();

        /// <summary>
        /// Text to be printed on the customer receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slipData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SlipData SlipData { get; set; }

        /// <summary>
        /// Used to group multiple transactions which would otherwise be considered independent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basketRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BasketRef { get; set; }

        /// <summary>
        /// Data relating to the type of transaction taking place (i.e. cash withdrawal, goods and services etc.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tranType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferOrderCancelRequestTranType? TranType { get; set; }

        /// <summary>
        /// This specifies the type of source account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srcAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferOrderCancelRequestSrcAccType? SrcAccType { get; set; }

        /// <summary>
        /// This specifies the type of destination account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferOrderCancelRequestDestAccType? DestAccType { get; set; }

        /// <summary>
        /// The System Trace Audit Number can be used to locate transactions across different systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stan { get; set; }

        /// <summary>
        /// This is a reference set by the original source of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rrn { get; set; }

        /// <summary>
        /// The reference used to identify the order which should be cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRef", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderRedeemRef { get; set; }

        /// <summary>
        /// An alternate reference used to identify the order which should be cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRefAlt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderRedeemRefAlt { get; set; }

        /// <summary>
        /// If required, the same pin which would have been used to redeem the order, should be supplied to cancel the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EncryptedPin Pin { get; set; }

        /// <summary>
        /// The ID Number of the sender. This is the same ID Number used when creating the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNumber { get; set; }

    }

    /// <summary>
    /// Used to submit data in a response to the cancelOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferOrderCancelResponse
    {
        /// <summary>
        /// A list containing labels that can be used to discover this transaction or group it with other transactions sharing labels with the same label name and value. Transaction labels should never be used to make transaction processing decisions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionLabel> TransactionLabels { get; set; }

        /// <summary>
        /// The randomly generated UUID identifying this transaction, as defined for a variant 4 UUID in [RFC 4122](https://tools.ietf.org/html/rfc4122)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The date and time of the message as recorded by the sender. The format shall be as defined for date-time in [RFC 3339 section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). It is recommended that the optional time-secfrac be included up to millisecond precision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }

        /// <summary>
        /// Data relating to the originator of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Originator { get; set; } = new Originator();

        /// <summary>
        /// Data relating to the sender of Transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Client { get; set; } = new Institution();

        /// <summary>
        /// Data relating to the entity with whom the Merchant will settle the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution SettlementEntity { get; set; }

        /// <summary>
        /// Data relating to the entity which ultimately processes the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution Receiver { get; set; }

        /// <summary>
        /// An array of identifiers which each identify the transaction within each entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyIdentifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ThirdPartyIdentifier> ThirdPartyIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<ThirdPartyIdentifier>();

        /// <summary>
        /// Text to be printed on the customer receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slipData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SlipData SlipData { get; set; }

        /// <summary>
        /// Used to group multiple transactions which would otherwise be considered independent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basketRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BasketRef { get; set; }

        /// <summary>
        /// Data relating to the type of transaction taking place (i.e. cash withdrawal, goods and services etc.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tranType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferOrderCancelResponseTranType? TranType { get; set; }

        /// <summary>
        /// This specifies the type of source account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srcAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferOrderCancelResponseSrcAccType? SrcAccType { get; set; }

        /// <summary>
        /// This specifies the type of destination account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferOrderCancelResponseDestAccType? DestAccType { get; set; }

        /// <summary>
        /// The System Trace Audit Number can be used to locate transactions across different systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stan { get; set; }

        /// <summary>
        /// This is a reference set by the original source of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rrn { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LedgerAmount Amount { get; set; } = new LedgerAmount();

        /// <summary>
        /// The reference used to identify the order which should be cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRef", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderRedeemRef { get; set; }

        /// <summary>
        /// An alternate reference used to identify the order which should be cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRefAlt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderRedeemRefAlt { get; set; }

        /// <summary>
        /// Reference used by the service provider to uniquely identify the money transfer order on their system. This field can be used if the provider supplies a supplementary reference for the order in addition to the orderRedeemRef. Note that any reference issued by the provider that is specific to a particular leg of the order process should be set as a ThirdPartyIdentifier (i.e. the authorization and redeem legs of the order should each have its own reference).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

    }

    /// <summary>
    /// Used to update the PIN on a order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferOrderPinUpdateRequest
    {
        /// <summary>
        /// A list containing labels that can be used to discover this transaction or group it with other transactions sharing labels with the same label name and value. Transaction labels should never be used to make transaction processing decisions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionLabel> TransactionLabels { get; set; }

        /// <summary>
        /// The randomly generated UUID identifying this transaction, as defined for a variant 4 UUID in [RFC 4122](https://tools.ietf.org/html/rfc4122)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The date and time of the message as recorded by the sender. The format shall be as defined for date-time in [RFC 3339 section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). It is recommended that the optional time-secfrac be included up to millisecond precision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }

        /// <summary>
        /// Data relating to the originator of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Originator { get; set; } = new Originator();

        /// <summary>
        /// Data relating to the sender of Transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Client { get; set; } = new Institution();

        /// <summary>
        /// Data relating to the entity with whom the Merchant will settle the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution SettlementEntity { get; set; }

        /// <summary>
        /// Data relating to the entity which ultimately processes the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution Receiver { get; set; }

        /// <summary>
        /// An array of identifiers which each identify the transaction within each entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyIdentifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ThirdPartyIdentifier> ThirdPartyIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<ThirdPartyIdentifier>();

        /// <summary>
        /// Text to be printed on the customer receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slipData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SlipData SlipData { get; set; }

        /// <summary>
        /// Used to group multiple transactions which would otherwise be considered independent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basketRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BasketRef { get; set; }

        /// <summary>
        /// Data relating to the type of transaction taking place (i.e. cash withdrawal, goods and services etc.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tranType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferOrderPinUpdateRequestTranType? TranType { get; set; }

        /// <summary>
        /// This specifies the type of source account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srcAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferOrderPinUpdateRequestSrcAccType? SrcAccType { get; set; }

        /// <summary>
        /// This specifies the type of destination account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferOrderPinUpdateRequestDestAccType? DestAccType { get; set; }

        /// <summary>
        /// The System Trace Audit Number can be used to locate transactions across different systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stan { get; set; }

        /// <summary>
        /// This is a reference set by the original source of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rrn { get; set; }

        /// <summary>
        /// The encrypted PIN to be used by the recipient to redeem the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public EncryptedPin Pin { get; set; } = new EncryptedPin();

        /// <summary>
        /// Reference used by the recipient to redeem the order. This must be printed on the receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderRedeemRef { get; set; }

        [Newtonsoft.Json.JsonProperty("remittanceRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemittanceRef { get; set; }

        /// <summary>
        /// Reference used by the service provider to uniquely identify the money transfer order on their system. This field can be used if the provider supplies a supplementary reference for the order in addition to the orderRedeemRef. Note that any reference issued by the provider that is specific to a particular leg of the order process should be set as a ThirdPartyIdentifier (i.e. the authorization and redeem legs of the order should each have its own reference).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        /// <summary>
        /// Uniquely identifies customer's profile on the upstream entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerProfileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerProfileId { get; set; }

        /// <summary>
        /// An alternate reference used by the recipient to redeem the order. This must be printed on the receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRefAlt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderRedeemRefAlt { get; set; }

    }

    /// <summary>
    /// Used to describe a change to the status of an order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferOrderStatusUpdateRequest
    {
        /// <summary>
        /// The date and time at which the order was updated on the money transfer service provider's system. This is relevant so that if multiple status updates were sent, but delivered out of order, the receiving system can ignore any older status updates. The format shall be as defined for date-time in RFC 3339 section 5.6. It is recommended that the optional time-secfrac be included up to millisecond precision.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset UpdateTime { get; set; }

        /// <summary>
        /// Reference used by the recipient to redeem the order. (this is the same as the query param in the lookupOrder operation). Should be supplied if remittanceRef is not supplied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderRedeemRef { get; set; }

        /// <summary>
        /// Reference for a remittance transaction. Should be supplied if orderRedeemRef is not supplied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remittanceRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemittanceRef { get; set; }

        /// <summary>
        /// The new status of the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferOrderStatusUpdateRequestStatus Status { get; set; }

        /// <summary>
        /// The new detailed description of the status of an order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Data relating to the originator of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Originator Originator { get; set; }

        /// <summary>
        /// Data relating to the sender of MoneyTransferOrderStatusUpdateRequest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution Client { get; set; }

        /// <summary>
        /// Data relating to the entity with whom the Merchant will settle the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution SettlementEntity { get; set; }

        /// <summary>
        /// Data relating to the entity which ultimately processes the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution Receiver { get; set; }

        /// <summary>
        /// An array of identifiers which each identify the transaction within each entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyIdentifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ThirdPartyIdentifier> ThirdPartyIdentifiers { get; set; }

        /// <summary>
        /// The order amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LedgerAmount Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("senderDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalDetails SenderDetails { get; set; }

        /// <summary>
        /// An alternate reference used by the recipient to redeem the order. This must be printed on the receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRefAlt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderRedeemRefAlt { get; set; }

        /// <summary>
        /// Reference used by the service provider to uniquely identify the money transfer order on their system. This field can be used if the provider supplies a supplementary reference for the order in addition to the orderRedeemRef. Note that any reference issued by the provider that is specific to a particular leg of the order process should be set as a ThirdPartyIdentifier (i.e. the authorization and redeem legs of the order should each have its own reference).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }

        /// <summary>
        /// Uniquely identifies customer's profile on the upstream entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerProfileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerProfileId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferQuoteRequest
    {
        /// <summary>
        /// The location where the money transfer is being initiated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Originator { get; set; } = new Originator();

        /// <summary>
        /// The service provider who is to effect the money transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Receiver { get; set; } = new Institution();

        /// <summary>
        /// Data relating to the entity with whom the Merchant will settle the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution SettlementEntity { get; set; }

        /// <summary>
        /// Contains details of the sender of the money transfer funds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("senderDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalDetails SenderDetails { get; set; }

        /// <summary>
        /// Contains details of the recipient of the money transfer funds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalDetails RecipientDetails { get; set; }

        /// <summary>
        /// The amount to be transferred. Whether this is the amount the sender pays or the amount the recipient is to receive is determined by the amountIncludesFees flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LedgerAmount Amount { get; set; } = new LedgerAmount();

        /// <summary>
        /// Indicates whether the amount in this MoneyTransferQuoteRequest is the amount the sender is willing to pay (false) or the amount the recipient is to receive (true).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountIncludesFees", Required = Newtonsoft.Json.Required.Always)]
        public bool AmountIncludesFees { get; set; } = false;

    }

    /// <summary>
    /// Used to submit data in a call to the redeemOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferRedeemRequest
    {
        /// <summary>
        /// A list containing labels that can be used to discover this transaction or group it with other transactions sharing labels with the same label name and value. Transaction labels should never be used to make transaction processing decisions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionLabel> TransactionLabels { get; set; }

        /// <summary>
        /// The randomly generated UUID identifying this transaction, as defined for a variant 4 UUID in [RFC 4122](https://tools.ietf.org/html/rfc4122)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The date and time of the message as recorded by the sender. The format shall be as defined for date-time in [RFC 3339 section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). It is recommended that the optional time-secfrac be included up to millisecond precision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }

        /// <summary>
        /// Data relating to the originator of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Originator { get; set; } = new Originator();

        /// <summary>
        /// Data relating to the sender of Transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Client { get; set; } = new Institution();

        /// <summary>
        /// Data relating to the entity with whom the Merchant will settle the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution SettlementEntity { get; set; }

        /// <summary>
        /// Data relating to the entity which ultimately processes the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution Receiver { get; set; }

        /// <summary>
        /// An array of identifiers which each identify the transaction within each entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyIdentifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ThirdPartyIdentifier> ThirdPartyIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<ThirdPartyIdentifier>();

        /// <summary>
        /// Text to be printed on the customer receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slipData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SlipData SlipData { get; set; }

        /// <summary>
        /// Used to group multiple transactions which would otherwise be considered independent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basketRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BasketRef { get; set; }

        /// <summary>
        /// Data relating to the type of transaction taking place (i.e. cash withdrawal, goods and services etc.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tranType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferRedeemRequestTranType? TranType { get; set; }

        /// <summary>
        /// This specifies the type of source account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srcAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferRedeemRequestSrcAccType? SrcAccType { get; set; }

        /// <summary>
        /// This specifies the type of destination account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferRedeemRequestDestAccType? DestAccType { get; set; }

        /// <summary>
        /// The System Trace Audit Number can be used to locate transactions across different systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stan { get; set; }

        /// <summary>
        /// This is a reference set by the original source of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rrn { get; set; }

        /// <summary>
        /// The amount to be transferred. This field may be deprecated in a future version of the API. We encourage you to please also populate the 'amounts.requestAmount' field with this information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LedgerAmount Amount { get; set; }

        /// <summary>
        /// The encrypted PIN to be used by the recipient to redeem the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EncryptedPin Pin { get; set; }

        /// <summary>
        /// Reference used by the recipient to redeem the order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderRedeemRef", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderRedeemRef { get; set; }

        /// <summary>
        /// Personal details of the intended recipient. Conditionally optional - please confirm with your integration partner whether this is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalDetails RecipientDetails { get; set; }

        /// <summary>
        /// Uniquely identifies customer's profile on the upstream entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerProfileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerProfileId { get; set; }

        /// <summary>
        /// This field may be used by the cashier to comment on any suspicious behaviour observed during the redemption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashierComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string CashierComment { get; set; }

        /// <summary>
        /// Amounts which make up the transaction. The existing 'amount' field currently takes precedence over this 'amounts' field, however the use of this 'amounts' field is encouraged. The 'amount' field may be deprecated in a future version of this API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amounts Amounts { get; set; }

    }

    /// <summary>
    /// Contains the data returned by a call to the redeemOrder operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferRedeemResponse
    {
        /// <summary>
        /// A list containing labels that can be used to discover this transaction or group it with other transactions sharing labels with the same label name and value. Transaction labels should never be used to make transaction processing decisions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionLabel> TransactionLabels { get; set; }

        /// <summary>
        /// The randomly generated UUID identifying this transaction, as defined for a variant 4 UUID in [RFC 4122](https://tools.ietf.org/html/rfc4122)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The date and time of the message as recorded by the sender. The format shall be as defined for date-time in [RFC 3339 section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). It is recommended that the optional time-secfrac be included up to millisecond precision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }

        /// <summary>
        /// Data relating to the originator of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Originator Originator { get; set; } = new Originator();

        /// <summary>
        /// Data relating to the sender of Transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("client", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Client { get; set; } = new Institution();

        /// <summary>
        /// Data relating to the entity with whom the Merchant will settle the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution SettlementEntity { get; set; }

        /// <summary>
        /// Data relating to the entity which ultimately processes the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution Receiver { get; set; }

        /// <summary>
        /// An array of identifiers which each identify the transaction within each entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyIdentifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ThirdPartyIdentifier> ThirdPartyIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<ThirdPartyIdentifier>();

        /// <summary>
        /// Text to be printed on the customer receipt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slipData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SlipData SlipData { get; set; }

        /// <summary>
        /// Used to group multiple transactions which would otherwise be considered independent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basketRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BasketRef { get; set; }

        /// <summary>
        /// Data relating to the type of transaction taking place (i.e. cash withdrawal, goods and services etc.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tranType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferRedeemResponseTranType? TranType { get; set; }

        /// <summary>
        /// This specifies the type of source account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srcAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferRedeemResponseSrcAccType? SrcAccType { get; set; }

        /// <summary>
        /// This specifies the type of destination account being used in the transaction (i.e. cheque, savings).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destAccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferRedeemResponseDestAccType? DestAccType { get; set; }

        /// <summary>
        /// The System Trace Audit Number can be used to locate transactions across different systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stan { get; set; }

        /// <summary>
        /// This is a reference set by the original source of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rrn { get; set; }

        /// <summary>
        /// The amount to be transferred. This field may be deprecated in a future version of the API. We encourage you to please also populate the 'amounts.requestAmount' field with this information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LedgerAmount Amount { get; set; } = new LedgerAmount();

        /// <summary>
        /// Reference used by the service provider to uniquely identify the money transfer order on their system. This field can be used if the provider supplies a supplementary reference for the order in addition to the orderRedeemRef. Note that any reference issued by the provider that is specific to a particular leg of the order process should be set as a ThirdPartyIdentifier (i.e. the authorization and redeem legs of the order should each have its own reference).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Uniquely identifies customer's profile on the upstream entity's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerProfileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerProfileId { get; set; }

        /// <summary>
        /// Amounts which make up the transaction. The existing 'amount' field currently takes precedence over this 'amounts' field, however the use of this 'amounts' field is encouraged. The 'amount' field may be deprecated in a future version of this API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amounts Amounts { get; set; }

    }

    /// <summary>
    /// An advice that notifies that the outcome of an authorisation transaction be reversed. This can be either due to cashier cancellation, or upstream timeout.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoneyTransferReversal
    {
        /// <summary>
        /// The randomly generated UUID identifying this advice, as defined for a variant 4 UUID in [RFC 4122](https://tools.ietf.org/html/rfc4122)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The UUID identifying the request that this advice relates to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RequestId { get; set; }

        /// <summary>
        /// The date and time of the message as recorded by the sender. The format shall be as defined for date-time in [RFC 3339 section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). It is recommended that the optional time-secfrac be included up to millisecond precision
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }

        /// <summary>
        /// The unaltered thirdPartyIdentifiers array as supplied in the related BasicResponse message. Required if thirdPartyIdentifiers field was present in the BasicResponse. If no thirdPartyIdentifiers was received in the BasicResponse or no BasicResponse was received then this should be set to the thirdPartyIdentifiers sent in the original request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyIdentifiers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ThirdPartyIdentifier> ThirdPartyIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<ThirdPartyIdentifier>();

        /// <summary>
        /// The System Trace Audit Number can be used to locate transactions across different systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stan { get; set; }

        /// <summary>
        /// This is a reference set by the original source of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rrn { get; set; }

        /// <summary>
        /// Communicates the final amount for a transaction in the approvedAmount field. If absent from a reversal then a full reversal is implied (i.e. a final amount of zero). If absent from a confirmation then a full confirmation is implied (i.e. the final amount is the same as the approvedAmount of the  authorisation response). The approvedAmount in an advice message should be less than or equal to the approvedAmount of the authorisation response as stand-in transactions are not currently supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amounts Amounts { get; set; }

        /// <summary>
        /// The reason for the reversal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reversalReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoneyTransferReversalReversalReason ReversalReason { get; set; }

    }

    /// <summary>
    /// The Originator object encapsulates data relating to the originator of the transaction
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Originator
    {
        /// <summary>
        /// The institution originating the request, as issued by Electrum
        /// </summary>
        [Newtonsoft.Json.JsonProperty("institution", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Institution Institution { get; set; } = new Institution();

        /// <summary>
        /// The ID that uniquely identifies each device or system in an originator's institution capable of sending requests. Required for transactions initiated from physical card entry or point-of-sale devices
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 8)]
        public string TerminalId { get; set; }

        /// <summary>
        /// Merchant data. Required if available
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchant", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Merchant Merchant { get; set; } = new Merchant();

        /// <summary>
        /// The ID that uniquely identifies the person operating the terminal specified by the terminalId field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string OperatorId { get; set; }

        /// <summary>
        /// The ID that uniquely identifies the originator's channel that this transaction was received through.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ChannelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationInfo
    {
        /// <summary>
        /// The total number of records in this search
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nrRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, double.MaxValue)]
        public long? NrRecords { get; set; }

        /// <summary>
        /// A textual description of this page's range in the search results
        /// </summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@".{0,256}")]
        public string Range { get; set; }

        /// <summary>
        /// A URI to the first page of this search
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@".{0,2083}")]
        public string FirstPage { get; set; }

        /// <summary>
        /// A URI to the previous page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previousPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@".{0,2083}")]
        public string PreviousPage { get; set; }

        /// <summary>
        /// A URI to the next page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@".{0,2083}")]
        public string NextPage { get; set; }

    }

    /// <summary>
    /// Personal details of a customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonalDetails
    {
        /// <summary>
        /// The person's first name(s)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// The person's last name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        /// <summary>
        /// Individual's identification number as per presented identification document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNumber { get; set; }

        /// <summary>
        /// Type of presented identification document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonalDetailsIdType? IdType { get; set; }

        /// <summary>
        /// Country of issue of presented identification document, expressed as an ISO 3166-1 Alpha-2 country code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string IdCountryCode { get; set; }

        /// <summary>
        /// Nationality expressed as an ISO 3166-1 Alpha-2 country code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string Nationality { get; set; }

        /// <summary>
        /// Country of Birth expressed as an ISO 3166-1 Alpha-2 country code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryOfBirth { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// Mobile phone number of the customer to which the outcome of a transaction can be communicated. This must conform to the ITU E.164 numbering plan (https://www.itu.int/rec/T-REC-E.164/en).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\+?[1-9]\d{1,14}")]
        public string ContactNumber { get; set; }

        /// <summary>
        /// An alternative work contact number. This must conform to the ITU E.164 numbering plan (https://www.itu.int/rec/T-REC-E.164/en).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altContactWork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\+?[1-9]\d{1,14}")]
        public string AltContactWork { get; set; }

        /// <summary>
        /// An alternative home contact number. This must conform to the ITU E.164 numbering plan (https://www.itu.int/rec/T-REC-E.164/en).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altContactHome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\+?[1-9]\d{1,14}")]
        public string AltContactHome { get; set; }

        /// <summary>
        /// The person's email address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// The person's account details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Account AccountDetails { get; set; }

        /// <summary>
        /// The date and time when the person's form of ID was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idIssuedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? IdIssuedDate { get; set; }

        /// <summary>
        /// The date and time when the person's form of ID expires.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? IdExpiryDate { get; set; }

        /// <summary>
        /// The person's full name in their native alphabet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("culturalName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CulturalName { get; set; }

        /// <summary>
        /// The source of the funds used for the money transfer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceOfIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonalDetailsSourceOfIncome? SourceOfIncome { get; set; }

        /// <summary>
        /// The person's occupation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonalDetailsOccupation? Occupation { get; set; }

    }

    /// <summary>
    /// Data that may be printed on the customer slip for information purposes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SlipData
    {
        /// <summary>
        /// An array of text lines and optional formatting to be printed on the customer slip.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SlipLine> MessageLines { get; set; }

        /// <summary>
        /// The width of the slip in normal (unformatted) characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slipWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SlipWidth { get; set; }

        /// <summary>
        /// An identifier that is printed on the customer slip and uniquely identifies the payment on the service provider's system. This value is used by the customer to request a refund when the service supports this function, and it is thus important that this number is unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuerReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z0-9]{1,40}")]
        public string IssuerReference { get; set; }

    }

    /// <summary>
    /// A line of text to be printed on the till slip
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SlipLine
    {
        /// <summary>
        /// Barcode information for this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("barcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Barcode Barcode { get; set; }

        /// <summary>
        /// Text contained on the line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; }

        /// <summary>
        /// Scale factor for font width. Assume 1.0 (i.e. normal size) if not present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fontWidthScaleFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FontWidthScaleFactor { get; set; }

        /// <summary>
        /// Scale factor for font height. Assume 1.0 (i.e. normal size) if not present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fontHeightScaleFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FontHeightScaleFactor { get; set; }

        /// <summary>
        /// Denotes a solid line on the slip. Assume false if not present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Line { get; set; } = false;

        /// <summary>
        /// Indicates the slip should be cut at this line. Assume false if not present.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Cut { get; set; } = false;

    }

    /// <summary>
    /// A model to describe SWIFT accounts
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwiftAccount : Account
    {
        /// <summary>
        /// The swift code for the particular bank account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("swiftCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SwiftCode { get; set; }

    }

    /// <summary>
    /// An identifier assigned by an entity which process the message. Identifiers are keyed by institution ID thereby enabling any institution to recall a transaction within the entity's own system using the entity's own identifier. Entities must not alter the identifier set by another entity. Once an identifier has been set by an entity, all other entities must send that identifier in subsequent messages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThirdPartyIdentifier
    {
        /// <summary>
        /// The entity's institution ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("institutionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InstitutionId { get; set; }

        /// <summary>
        /// The identifier assigned to this transaction by the institution represented in institutionId. This value should be unique within the institution's system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionIdentifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TransactionIdentifier { get; set; }

    }

    /// <summary>
    /// A label assigned to a transaction by the entity processing the transaction. Labels are used for grouping or discovering transactions after transaction processing. Note that no transaction processing decision is made based on transaction labels.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionLabel
    {
        /// <summary>
        /// Label name that indicates the type and intended use of the transaction label. The meaning of label names must be agreed upon by the parties involved in transaction processing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9_]{1,100}$")]
        public string Name { get; set; }

        /// <summary>
        /// The value assigned to the transaction label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z.-9 _-]{1,100}$")]
        public string Value { get; set; }

    }

    /// <summary>
    /// Type of presented identification document.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NATIONAL_ID")]
        NATIONAL_ID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DRIVERS_LICENCE")]
        DRIVERS_LICENCE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ASYLUM_DOCUMENT")]
        ASYLUM_DOCUMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_PROFILE_ID")]
        CUSTOMER_PROFILE_ID = 5,

    }

    /// <summary>
    /// Type of presented identification document. This must be supplied if idNumber is supplied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NATIONAL_ID")]
        NATIONAL_ID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DRIVERS_LICENCE")]
        DRIVERS_LICENCE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ASYLUM_DOCUMENT")]
        ASYLUM_DOCUMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_PROFILE_ID")]
        CUSTOMER_PROFILE_ID = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EncryptionParametersPinBlockFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ISO_9564_FORMAT_0")]
        ISO_9564_FORMAT_0 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ISO_9564_FORMAT_1")]
        ISO_9564_FORMAT_1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ISO_9564_FORMAT_3")]
        ISO_9564_FORMAT_3 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ISO_9564_FORMAT_4")]
        ISO_9564_FORMAT_4 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ErrorDetailErrorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSACTION_NOT_ALLOWED_FOR_MERCHANT")]
        TRANSACTION_NOT_ALLOWED_FOR_MERCHANT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALREADY_REDEEMED")]
        ALREADY_REDEEMED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PIN_RETRIES_EXCEEDED")]
        PIN_RETRIES_EXCEEDED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INCORRECT_PIN")]
        INCORRECT_PIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNABLE_TO_REDEEM")]
        UNABLE_TO_REDEEM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_REDEEM_REF")]
        INVALID_REDEEM_REF = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DAILY_LIMIT_EXCEEDED")]
        DAILY_LIMIT_EXCEEDED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MONTHLY_LIMIT_EXCEEDED")]
        MONTHLY_LIMIT_EXCEEDED = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PROVIDER_SYSTEM_ERROR")]
        PROVIDER_SYSTEM_ERROR = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_CHECK_FAILED")]
        CUSTOMER_CHECK_FAILED = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE_RECORD")]
        DUPLICATE_RECORD = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FORMAT_ERROR")]
        FORMAT_ERROR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR")]
        SYSTEM_ERROR = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSACTION_DECLINED")]
        TRANSACTION_DECLINED = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_AMOUNT")]
        INVALID_AMOUNT = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ROUTING_ERROR")]
        ROUTING_ERROR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSACTION_NOT_SUPPORTED")]
        TRANSACTION_NOT_SUPPORTED = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"UNABLE_TO_LOCATE_RECORD")]
        UNABLE_TO_LOCATE_RECORD = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"UPSTREAM_UNAVAILABLE")]
        UPSTREAM_UNAVAILABLE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHENTICATION_ERROR")]
        AUTHENTICATION_ERROR = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_MERCHANT")]
        INVALID_MERCHANT = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSACTION_LIMIT_EXCEEDED")]
        TRANSACTION_LIMIT_EXCEEDED = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LedgerAmountLedgerIndicator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEBIT")]
        DEBIT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferAuthRequestTranType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES")]
        GOODS_AND_SERVICES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_WITHDRAWAL")]
        CASH_WITHDRAWAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBIT_ADJUSTMENT")]
        DEBIT_ADJUSTMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES_WITH_CASH_BACK")]
        GOODS_AND_SERVICES_WITH_CASH_BACK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_CASH")]
        NON_CASH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNS")]
        RETURNS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPOSIT")]
        DEPOSIT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT_ADJUSTMENT")]
        CREDIT_ADJUSTMENT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_CREDIT")]
        GENERAL_CREDIT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_FUNDS_INQUIRY")]
        AVAILABLE_FUNDS_INQUIRY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BALANCE_INQUIRY")]
        BALANCE_INQUIRY = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_INQUIRY")]
        GENERAL_INQUIRY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_VERIFICATION_INQUIRY")]
        CARD_VERIFICATION_INQUIRY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CARDHOLDER_ACCOUNTS_TRANSFER")]
        CARDHOLDER_ACCOUNTS_TRANSFER = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_TRANSFER")]
        GENERAL_TRANSFER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_PAYMENT")]
        GENERAL_PAYMENT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_TO_ACCOUNT")]
        PAYMENT_TO_ACCOUNT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT_TO_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT_TO_ACCOUNT = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PLACE_HOLD_ON_CARD")]
        PLACE_HOLD_ON_CARD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_ADMIN")]
        GENERAL_ADMIN = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGE_PIN")]
        CHANGE_PIN = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_HOLDER_INQUIRY")]
        CARD_HOLDER_INQUIRY = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"POINTS_INQUIRY")]
        POINTS_INQUIRY = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferAuthRequestSrcAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferAuthRequestDestAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferAuthRequestPurposeOfRemittance
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAMILY_SUPPORT")]
        FAMILY_SUPPORT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EDUCATION")]
        EDUCATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_AND_DONATION")]
        GIFT_AND_DONATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDICAL_TREATMENT")]
        MEDICAL_TREATMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MAINTENANCE_EXPENSES")]
        MAINTENANCE_EXPENSES = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TRAVEL")]
        TRAVEL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferAuthRequestRecipientRelationship
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PARENT")]
        PARENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CHILD")]
        CHILD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SPOUSE")]
        SPOUSE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_LAWS")]
        IN_LAWS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RELATIVE")]
        RELATIVE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRIEND_FAMILY")]
        FRIEND_FAMILY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE_FAMILY")]
        EMPLOYEE_FAMILY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FRIEND")]
        FRIEND = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEE")]
        EMPLOYEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPLIER")]
        SUPPLIER = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"SERVICE_PROVIDER")]
        SERVICE_PROVIDER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DONOR_RECEIVER_OF_CHARITABLE_FUNDS")]
        DONOR_RECEIVER_OF_CHARITABLE_FUNDS = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"TRADE_BUSINESS_PARTNER")]
        TRADE_BUSINESS_PARTNER = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferAuthResponseTranType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES")]
        GOODS_AND_SERVICES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_WITHDRAWAL")]
        CASH_WITHDRAWAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBIT_ADJUSTMENT")]
        DEBIT_ADJUSTMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES_WITH_CASH_BACK")]
        GOODS_AND_SERVICES_WITH_CASH_BACK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_CASH")]
        NON_CASH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNS")]
        RETURNS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPOSIT")]
        DEPOSIT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT_ADJUSTMENT")]
        CREDIT_ADJUSTMENT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_CREDIT")]
        GENERAL_CREDIT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_FUNDS_INQUIRY")]
        AVAILABLE_FUNDS_INQUIRY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BALANCE_INQUIRY")]
        BALANCE_INQUIRY = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_INQUIRY")]
        GENERAL_INQUIRY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_VERIFICATION_INQUIRY")]
        CARD_VERIFICATION_INQUIRY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CARDHOLDER_ACCOUNTS_TRANSFER")]
        CARDHOLDER_ACCOUNTS_TRANSFER = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_TRANSFER")]
        GENERAL_TRANSFER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_PAYMENT")]
        GENERAL_PAYMENT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_TO_ACCOUNT")]
        PAYMENT_TO_ACCOUNT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT_TO_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT_TO_ACCOUNT = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PLACE_HOLD_ON_CARD")]
        PLACE_HOLD_ON_CARD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_ADMIN")]
        GENERAL_ADMIN = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGE_PIN")]
        CHANGE_PIN = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_HOLDER_INQUIRY")]
        CARD_HOLDER_INQUIRY = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"POINTS_INQUIRY")]
        POINTS_INQUIRY = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferAuthResponseSrcAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferAuthResponseDestAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferCancelOrderReversalReversalReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TIMEOUT")]
        TIMEOUT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSE_NOT_FINAL")]
        RESPONSE_NOT_FINAL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferLookupResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNREDEEMED")]
        UNREDEEMED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REDEEMED")]
        REDEEMED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_HOLD")]
        ON_HOLD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UNCONFIRMED")]
        UNCONFIRMED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferOrderCancelRequestTranType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES")]
        GOODS_AND_SERVICES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_WITHDRAWAL")]
        CASH_WITHDRAWAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBIT_ADJUSTMENT")]
        DEBIT_ADJUSTMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES_WITH_CASH_BACK")]
        GOODS_AND_SERVICES_WITH_CASH_BACK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_CASH")]
        NON_CASH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNS")]
        RETURNS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPOSIT")]
        DEPOSIT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT_ADJUSTMENT")]
        CREDIT_ADJUSTMENT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_CREDIT")]
        GENERAL_CREDIT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_FUNDS_INQUIRY")]
        AVAILABLE_FUNDS_INQUIRY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BALANCE_INQUIRY")]
        BALANCE_INQUIRY = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_INQUIRY")]
        GENERAL_INQUIRY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_VERIFICATION_INQUIRY")]
        CARD_VERIFICATION_INQUIRY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CARDHOLDER_ACCOUNTS_TRANSFER")]
        CARDHOLDER_ACCOUNTS_TRANSFER = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_TRANSFER")]
        GENERAL_TRANSFER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_PAYMENT")]
        GENERAL_PAYMENT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_TO_ACCOUNT")]
        PAYMENT_TO_ACCOUNT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT_TO_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT_TO_ACCOUNT = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PLACE_HOLD_ON_CARD")]
        PLACE_HOLD_ON_CARD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_ADMIN")]
        GENERAL_ADMIN = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGE_PIN")]
        CHANGE_PIN = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_HOLDER_INQUIRY")]
        CARD_HOLDER_INQUIRY = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"POINTS_INQUIRY")]
        POINTS_INQUIRY = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferOrderCancelRequestSrcAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferOrderCancelRequestDestAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferOrderCancelResponseTranType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES")]
        GOODS_AND_SERVICES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_WITHDRAWAL")]
        CASH_WITHDRAWAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBIT_ADJUSTMENT")]
        DEBIT_ADJUSTMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES_WITH_CASH_BACK")]
        GOODS_AND_SERVICES_WITH_CASH_BACK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_CASH")]
        NON_CASH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNS")]
        RETURNS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPOSIT")]
        DEPOSIT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT_ADJUSTMENT")]
        CREDIT_ADJUSTMENT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_CREDIT")]
        GENERAL_CREDIT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_FUNDS_INQUIRY")]
        AVAILABLE_FUNDS_INQUIRY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BALANCE_INQUIRY")]
        BALANCE_INQUIRY = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_INQUIRY")]
        GENERAL_INQUIRY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_VERIFICATION_INQUIRY")]
        CARD_VERIFICATION_INQUIRY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CARDHOLDER_ACCOUNTS_TRANSFER")]
        CARDHOLDER_ACCOUNTS_TRANSFER = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_TRANSFER")]
        GENERAL_TRANSFER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_PAYMENT")]
        GENERAL_PAYMENT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_TO_ACCOUNT")]
        PAYMENT_TO_ACCOUNT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT_TO_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT_TO_ACCOUNT = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PLACE_HOLD_ON_CARD")]
        PLACE_HOLD_ON_CARD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_ADMIN")]
        GENERAL_ADMIN = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGE_PIN")]
        CHANGE_PIN = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_HOLDER_INQUIRY")]
        CARD_HOLDER_INQUIRY = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"POINTS_INQUIRY")]
        POINTS_INQUIRY = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferOrderCancelResponseSrcAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferOrderCancelResponseDestAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferOrderPinUpdateRequestTranType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES")]
        GOODS_AND_SERVICES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_WITHDRAWAL")]
        CASH_WITHDRAWAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBIT_ADJUSTMENT")]
        DEBIT_ADJUSTMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES_WITH_CASH_BACK")]
        GOODS_AND_SERVICES_WITH_CASH_BACK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_CASH")]
        NON_CASH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNS")]
        RETURNS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPOSIT")]
        DEPOSIT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT_ADJUSTMENT")]
        CREDIT_ADJUSTMENT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_CREDIT")]
        GENERAL_CREDIT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_FUNDS_INQUIRY")]
        AVAILABLE_FUNDS_INQUIRY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BALANCE_INQUIRY")]
        BALANCE_INQUIRY = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_INQUIRY")]
        GENERAL_INQUIRY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_VERIFICATION_INQUIRY")]
        CARD_VERIFICATION_INQUIRY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CARDHOLDER_ACCOUNTS_TRANSFER")]
        CARDHOLDER_ACCOUNTS_TRANSFER = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_TRANSFER")]
        GENERAL_TRANSFER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_PAYMENT")]
        GENERAL_PAYMENT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_TO_ACCOUNT")]
        PAYMENT_TO_ACCOUNT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT_TO_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT_TO_ACCOUNT = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PLACE_HOLD_ON_CARD")]
        PLACE_HOLD_ON_CARD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_ADMIN")]
        GENERAL_ADMIN = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGE_PIN")]
        CHANGE_PIN = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_HOLDER_INQUIRY")]
        CARD_HOLDER_INQUIRY = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"POINTS_INQUIRY")]
        POINTS_INQUIRY = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferOrderPinUpdateRequestSrcAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferOrderPinUpdateRequestDestAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferOrderStatusUpdateRequestStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNREDEEMED")]
        UNREDEEMED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REDEEMED")]
        REDEEMED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ON_HOLD")]
        ON_HOLD = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UNCONFIRMED")]
        UNCONFIRMED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferRedeemRequestTranType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES")]
        GOODS_AND_SERVICES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_WITHDRAWAL")]
        CASH_WITHDRAWAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBIT_ADJUSTMENT")]
        DEBIT_ADJUSTMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES_WITH_CASH_BACK")]
        GOODS_AND_SERVICES_WITH_CASH_BACK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_CASH")]
        NON_CASH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNS")]
        RETURNS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPOSIT")]
        DEPOSIT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT_ADJUSTMENT")]
        CREDIT_ADJUSTMENT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_CREDIT")]
        GENERAL_CREDIT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_FUNDS_INQUIRY")]
        AVAILABLE_FUNDS_INQUIRY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BALANCE_INQUIRY")]
        BALANCE_INQUIRY = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_INQUIRY")]
        GENERAL_INQUIRY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_VERIFICATION_INQUIRY")]
        CARD_VERIFICATION_INQUIRY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CARDHOLDER_ACCOUNTS_TRANSFER")]
        CARDHOLDER_ACCOUNTS_TRANSFER = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_TRANSFER")]
        GENERAL_TRANSFER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_PAYMENT")]
        GENERAL_PAYMENT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_TO_ACCOUNT")]
        PAYMENT_TO_ACCOUNT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT_TO_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT_TO_ACCOUNT = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PLACE_HOLD_ON_CARD")]
        PLACE_HOLD_ON_CARD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_ADMIN")]
        GENERAL_ADMIN = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGE_PIN")]
        CHANGE_PIN = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_HOLDER_INQUIRY")]
        CARD_HOLDER_INQUIRY = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"POINTS_INQUIRY")]
        POINTS_INQUIRY = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferRedeemRequestSrcAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferRedeemRequestDestAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferRedeemResponseTranType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES")]
        GOODS_AND_SERVICES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH_WITHDRAWAL")]
        CASH_WITHDRAWAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBIT_ADJUSTMENT")]
        DEBIT_ADJUSTMENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GOODS_AND_SERVICES_WITH_CASH_BACK")]
        GOODS_AND_SERVICES_WITH_CASH_BACK = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_CASH")]
        NON_CASH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RETURNS")]
        RETURNS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPOSIT")]
        DEPOSIT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT_ADJUSTMENT")]
        CREDIT_ADJUSTMENT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_CREDIT")]
        GENERAL_CREDIT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE_FUNDS_INQUIRY")]
        AVAILABLE_FUNDS_INQUIRY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BALANCE_INQUIRY")]
        BALANCE_INQUIRY = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_INQUIRY")]
        GENERAL_INQUIRY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_VERIFICATION_INQUIRY")]
        CARD_VERIFICATION_INQUIRY = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CARDHOLDER_ACCOUNTS_TRANSFER")]
        CARDHOLDER_ACCOUNTS_TRANSFER = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_TRANSFER")]
        GENERAL_TRANSFER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_PAYMENT")]
        GENERAL_PAYMENT = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_TO_ACCOUNT")]
        PAYMENT_TO_ACCOUNT = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYMENT_FROM_ACCOUNT_TO_ACCOUNT")]
        PAYMENT_FROM_ACCOUNT_TO_ACCOUNT = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PLACE_HOLD_ON_CARD")]
        PLACE_HOLD_ON_CARD = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_ADMIN")]
        GENERAL_ADMIN = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"CHANGE_PIN")]
        CHANGE_PIN = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_HOLDER_INQUIRY")]
        CARD_HOLDER_INQUIRY = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"POINTS_INQUIRY")]
        POINTS_INQUIRY = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferRedeemResponseSrcAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferRedeemResponseDestAccType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CHEQUE")]
        CHEQUE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT")]
        CREDIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIVERSAL")]
        UNIVERSAL = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ELECTRONIC_PURSE")]
        ELECTRONIC_PURSE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT_CARD")]
        GIFT_CARD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STORED_VALUE")]
        STORED_VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MoneyTransferReversalReversalReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TIMEOUT")]
        TIMEOUT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSE_NOT_FINAL")]
        RESPONSE_NOT_FINAL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PersonalDetailsIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NATIONAL_ID")]
        NATIONAL_ID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DRIVERS_LICENCE")]
        DRIVERS_LICENCE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ASYLUM_DOCUMENT")]
        ASYLUM_DOCUMENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_PROFILE_ID")]
        CUSTOMER_PROFILE_ID = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PersonalDetailsSourceOfIncome
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SALARIED")]
        SALARIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PERSONAL_INCOME")]
        PERSONAL_INCOME = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LOAN")]
        LOAN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS")]
        BUSINESS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVINGS")]
        SAVINGS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT")]
        GIFT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"WINNINGS")]
        WINNINGS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SALE_OF_ASSETS")]
        SALE_OF_ASSETS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"INVESTMENTS")]
        INVESTMENTS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FAMILY_FINANCIAL_SUPPORT")]
        FAMILY_FINANCIAL_SUPPORT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"GOVERNMENT_FINANCIAL_SUPPORT")]
        GOVERNMENT_FINANCIAL_SUPPORT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PersonalDetailsOccupation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESSMAN")]
        BUSINESSMAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROFESSIONAL")]
        PROFESSIONAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HOUSE_WIFE")]
        HOUSE_WIFE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_WORKER")]
        GENERAL_WORKER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603